readNdClean_dc = function() return (Matrix[double] X, Matrix[double] y)
{
  Forig = read("KDD98.csv", data_type="frame", format="csv", header=TRUE);
  F = Forig[,1:469];
  y = as.matrix(Forig[,472])

  # data preparation
  bin = matrix(0, ncol(F), 1);
  bin[5,] = 1;
  bin[8,] = 1;
  bin[17,] = 1;
  bin[27,] = 1;
  bin[44:50,] = matrix(1, 7, 1);
  bin[54,] = 1;
  bin[76:195,] = matrix(1, 195-76+1, 1);
  bin[199:361,] = matrix(1, 361-199+1, 1);
  bin[408,] = 1;
  bin[410:412,] = matrix(1, 3, 1);
  bin[435:469,] = matrix(1, 469-435+1, 1);

  recode="1";
  for(i in 2:nrow(bin))
    if( as.scalar(bin[i,])!=1 )
      recode = recode+","+i;
  binning = "{id:5, method:equi-width, numbins:10}"
  for(i in 6:nrow(bin))
    if( as.scalar(bin[i,])==1 )
      binning = binning+",\n{id:"+i+", method:equi-width, numbins:10}";
  dummy="1";
  for (i in 2:nrow(bin))
    if( as.scalar(bin[i,])!=1 | as.scalar(bin[i,])==1)
      dummy = dummy+","+i;

  jspec= "{ ids:true, recode:["+recode+"], bin:["+binning+"], dummycode:["+dummy+"]}"
  [X,M] = transformencode(target=F, spec=jspec);
  X = replace(target=X, pattern=NaN, replacement=0);
  print("number of rows "+nrow(X) + "\n number of cols " + ncol(X));
}

readNdClean_rc = function() return (Matrix[double] X, Matrix[double] y)
{
  Forig = read("KDD98.csv", data_type="frame", format="csv", header=TRUE);
  F = Forig[,1:469];
  y = as.matrix(Forig[,472])

  # data preparation
  bin = matrix(0, ncol(F), 1);
  bin[5,] = 1;
  bin[8,] = 1;
  bin[17,] = 1;
  bin[27,] = 1;
  bin[44:50,] = matrix(1, 7, 1);
  bin[54,] = 1;
  bin[76:195,] = matrix(1, 195-76+1, 1);
  bin[199:361,] = matrix(1, 361-199+1, 1);
  bin[408,] = 1;
  bin[410:412,] = matrix(1, 3, 1);
  bin[435:469,] = matrix(1, 469-435+1, 1);

  recode="1";
  for(i in 2:nrow(bin))
    if( as.scalar(bin[i,])!=1 )
      recode = recode+","+i;
  binning = "{id:5, method:equi-width, numbins:10}"
  for(i in 6:nrow(bin))
    if( as.scalar(bin[i,])==1 )
      binning = binning+",\n{id:"+i+", method:equi-width, numbins:10}";
  dummy="1";
  for (i in 2:nrow(bin))
    if( as.scalar(bin[i,])!=1 | as.scalar(bin[i,])==1)
      dummy = dummy+","+i;

  # No dummycoding to reduce #cols. Eigen fails to converge with large #cols.
  jspec= "{ ids:true, recode:["+recode+"], bin:["+binning+"]}"
  [X,M] = transformencode(target=F, spec=jspec);
  X = replace(target=X, pattern=NaN, replacement=0);
  print("number of rows "+nrow(X) + "\nnumber of cols " + ncol(X));
}

# Binning and dummycode
[X, y] = readNdClean_dc();
write(X, "KDD_X", format="binary");
write(y, "KDD_y.csv", format="csv");

# Synthetic equivalent (w/ similar data characteristics)
X_syn = rand(rows=95412, cols=7909, sparsity=0.06, seed=42);
y_syn = rand(rows=95412, cols=1, sparsity=1, seed=42);
write(X_syn, "KDD_X_Syn.csv", format="csv");
write(y_syn, "KDD_y_Syn.csv", format="csv");

# Binning and recode
[X, y] = readNdClean_rc();
write(X, "KDD_recode_X", format="binary");
write(X, "KDD_recode_X.csv", format="csv");

# Synthetic equivalent of recoded version (w/ similar data characteristics)
X_syn = rand(rows=95412, cols=469, sparsity=0.85, seed=42);
write(X_syn, "KDD_X_recode_Syn.csv", format="csv");


columnsScale = function(Matrix[Double] X)
return (Matrix[Double] X_scaled)
{
  mask = matrix(0, 1, ncol(X));
  mask[,1:14] = matrix(1, 1, 14); #columns to scale
  # Separate and scale columns in mask
  X2 = removeEmpty(target=X, margin="cols", select=t(mask));
  #scaled = scale(X=X2);
  scaled = scaleMinMax(X2);
  # Merge back the scaled columns in right positions
  notMask = mask != 1;
  X_scaled = X*notMask + scaled %*% removeEmpty(target=diag(t(mask)), margin="rows");
}

# input file dimensions 10M x 40 
# NOTE: UMM reduces 10sec for each transformencode call
data = read("file:/home/aphani/datasets/criteo_day21_10M_cleaned", data_type="frame", format="csv", header=FALSE);
# Replace dummycode with recode in spec1 before exeuting
jspec = read("file:/home/aphani/datasets/criteo_spec4.json", data_type="scalar", value_type="string");
#jspec = read("file:/home/aphani/datasets/criteo_norm4.json", data_type="scalar", value_type="string");

print(sum(as.matrix(data[,1]))); #initiate read
lim = 10; #10
R = matrix(0, rows=lim, cols=1);
for (i in 1:lim) {
  print("INFO: starting transformencode");
  t1 = time();
  [X_enc, M] = transformencode(target=data, spec=jspec);
  X_enc = columnsScale(X_enc);
  t2 = time();
  R[i,1] = floor((t2-t1)/1000000);  
  print("Elapsed time for transformations using SystemDS = "+floor((t2-t1)/1000000)+" millsec");
}

R = order(target=R, by=1);
res = sum(R[1:5,])/5;
print(res);


#print("("+nrow(X_norm)+", "+ncol(X_norm)+")");
#print(sum(X_enc));
print("("+nrow(X_enc)+", "+ncol(X_enc)+")");

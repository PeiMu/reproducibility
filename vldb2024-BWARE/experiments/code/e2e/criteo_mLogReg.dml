
stats = function(Matrix[Double] P, Matrix[Double] Y, Double split){
	print("Split: " + split)
	Pc = (P > split) 
	[nn, ca_test] = confusionMatrix(Pc + 1, Y+1)
	accuracy = sum(Y == Pc) / nrow(Y)
	print("Accuracy:")
	print(accuracy)
	print("Confusion Matrix: ")
	print(toString(ca_test))

	print("AUC:      " + auc(Y, P))

	# clip predictions to 0 - 1 range without containing 0 or 1.
	P = min(1, max(0 , P))
	invLogP = log(1 - P)
	logP = log(P)
	invYLogP = ( 1 - Y ) * invLogP
	invYLogP = sum(invYLogP)
	YLogP = sum(Y * logP)
	logSum = YLogP + invYLogP
	logLoss = -1 / nrow(Y) * logSum

	print("LogLoss:  " + logLoss)

}


# Frame input
data = read($1)

# Detect and apply schema
sc = detectSchema(data)
data = applySchema(data, sc)

# Transform encode
spec = read($2, data_type="scalar", value_type="string")
[Xt, M] = transformencode(target=data, spec=spec)

# Replace all Nan Values.
X = replace(target=Xt, pattern=NaN, replacement=0);

# Extract X and Y Criteo
Y = X[1:nrow(X), 1]
X = X[1:nrow(X), 2:(ncol(X))]

# pre-process normalize
[X, cmin, cmax] = normalize(X)

if(min(y) == 0){
 y_corrected = Y + 1
}
else{
 y_corrected = Y
}

# Train model
bias = multiLogReg(X=X, y=y_corrected, reg=1e-1, icpt=0, tol=1e-10, maxi=1000, verbose=TRUE)

# Train stats
[nn, y_predict_test, acc_train]  = multiLogRegPredict(X=X, B=bias, Y = y_corrected)
print("Train Accuracy: " + acc_train)

# Read Test data
data2 = read($3)

# Apply schema from training
data2 = applySchema(data2, sc)

# Transform Apply
X_test = transformapply(target=data2, spec=spec, meta=M)

# Replace all Nan Values.
X_test = replace(target=X_test, pattern=NaN, replacement=0);

# Extract X and Y Criteo
Y_test = X_test[1:nrow(X_test), 1]
X_test = X_test[1:nrow(X_test), 2:ncol(X_test)]

# normalize
X_test = normalizeApply(X_test, cmin, cmax)

if(min(y) == 0){
 Y_test = Y + 1
}
else{
 Y_test = Y
}

# test Statistics
[nn, y_predict_test, acc_test] = multiLogRegPredict(X=X_test, B=bias, Y = Y_test)
print("Test Accuracy: " + acc_test)

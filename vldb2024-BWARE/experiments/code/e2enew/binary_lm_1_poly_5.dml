
stats = function(Matrix[Double] P, Matrix[Double] Y, Double split){
	print("Split: " + split)
	Pc = (P > split) 
	[nn, ca_test] = confusionMatrix(Pc + 1, Y+1)
	accuracy = sum(Y == Pc) / nrow(Y)
	print("Accuracy:")
	print(accuracy)
	print("Confusion Matrix: ")
	print(toString(ca_test))

	print("AUC:      " + auc(Y, P))

	# clip predictions to 0 - 1 range without containing 0 or 1.
	P = min(1, max(0 , P))
	invLogP = log(1 - P)
	logP = log(P)
	invYLogP = ( 1 - Y ) * invLogP
	invYLogP = sum(invYLogP)
	YLogP = sum(Y * logP)
	logSum = YLogP + invYLogP
	logLoss = -1 / nrow(Y) * logSum

	print("LogLoss:  " + logLoss)

}


# Frame input
data = read($1)

# Detect and apply schema
sc = detectSchema(data)
data = applySchema(data, sc)

# Transform encode
spec = read($2, data_type="scalar", value_type="string")
[Xt, M] = transformencode(target=data, spec=spec)

# Replace all Nan Values.
X = replace(target=Xt, pattern=NaN, replacement=0);

# Extract X and Y Criteo
Y = X[1:nrow(X), 1]
X = X[1:nrow(X), 2:(ncol(X))]

X = cbind(X, X^2, X^3, X^4, X^5)

# pre-process normalize
[X, cmin, cmax] = normalize(X)

if(max(Y) > 1)
	Y = Y -1

# Train model
bias = lmCG(X=X, y=Y, reg=1e-1, icpt=0, tol=1e-10, maxi=1000, verbose=TRUE)

# Train stats
p_train = lmPredict(X=X, B=bias, icpt=0, verbose=FALSE)
stats(p_train, Y, 0.5)


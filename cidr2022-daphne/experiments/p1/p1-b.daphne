// ****************************************************************************
// Reading the base data
// ****************************************************************************

tp0 = now();

c = readFrame($inCustomer);
o = readFrame($inOrders);
l = readFrame($inLineitem);

tp1 = now();

// ****************************************************************************
// Query part
// ****************************************************************************

/*
 * Equivalent to the following SQL query on TPC-H data:
 *
 * SELECT o.*, SUM(L_EXTENDEDPRICE)
 * FROM orders o, lineitem, customer
 * WHERE O_ORDERKEY = L_ORDERKEY
 *  AND C_CUSTKEY = O_CUSTKEY
 *  AND C_MKTSEGMENT <= $mktSegUpper
 *  AND O_ORDERDATE >= $orderDateLower
 * GROUP BY o.*
 *
 * Note that the grouping effectively only works on O_ORDERKEY, since that is
 * the primary key of the orders table.
 */

selC = as.matrix(c[, "C_MKTSEGMENT"]) <= $mktSegUpper;
c = c[, "C_CUSTKEY"];
c = c[[selC, ]];

selO = as.matrix(o[, "O_ORDERDATE"]) >= $orderDateLower;
o = o[[selO, ]];

// TODO semiJoin could also return a bit vector.
frm, tidO = semiJoin(o, c, "O_CUSTKEY", "C_CUSTKEY");
o = o[tidO, ];

frm, tidO = groupJoin(o, l, "O_ORDERKEY", "L_ORDERKEY", "L_EXTENDEDPRICE");
res = cbind(o[tidO, ], frm[, "L_EXTENDEDPRICE"]);

tp2 = now();

// ****************************************************************************
// ML part
// ****************************************************************************

// TODO Do this after the column extraction.
XY = as.matrix.f64(res);

tp3 = now();

// TODO Do this on the frame, then it's zero cost.
X0 = XY[, seq(1, as.si64(ncol(XY)) - 2, 1)];

// TODO Most of the remaining ops (until the matmul) could be done (more)
// efficiently on frames, no need to switch to matrices so early. But this also
// applies to the baseline of Pandas+TF, even in MonetDB (although, then the
// user would have to think about it manually).

i0 = fill(-1, 1, 1); // don't encode O_CUSTKEY
i1 = fill(3, 1, 1); // encode O_ORDERSTATUS
i2 = fill(-1, 1, 2); // don't encode O_TOTALPRICE, O_ORDERDATE
i3 = fill(5, 1, 1); // encode O_ORDERPRIORITY
// TODO Use one-hot here, but currently it goes OOM then.
//i4 = fill(1000, 1, 1); // encode O_CLERK
i4 = fill(-1, 1, 1); // don't encode O_CLERK
i5 = fill(-1, 1, 2); // don't encode O_SHIPPRIORITY, O_COMMENT
i = cbind(cbind(cbind(i0, i1), cbind(i2, i3)), cbind(i4, i5));

X = oneHot(X0, i);

// TODO Do this on the frame, then it's zero cost.
// TODO Ensure this is a no-op for one column of the correct value type.
y = XY[, seq(as.si64(ncol(XY)) - 1, as.si64(ncol(XY)) - 1, 1)];

X = (X - mean(X, 1)) / stddev(X, 1);

X = cbind(X, fill(1.0, nrow(X), 1));

lambda = fill(0.001, ncol(X), 1);
A = t(X) @ X;
b = t(X) @ y;

// TODO: Does that still make sense, algorithmically?
A = replace(A, nan, 0.0);
b = replace(b, nan, 0.0);

A = A + diagMatrix(lambda);

beta = solve(A, b);

// ****************************************************************************
// Result output
// ****************************************************************************

print(beta);

tp4 = now();

print("\t", 0, 1);
print(tp1 - tp0, 0, 1);
print("\t", 0, 1);
print(tp2 - tp1, 0, 1);
print("\t", 0, 1);
print(tp3 - tp2, 0, 1);
print("\t", 0, 1);
print(tp4 - tp3, 0, 1);

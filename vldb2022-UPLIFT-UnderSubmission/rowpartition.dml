# Default size = 100M * 4 w/ 1M #distincts per col. 5 char strings.

data = read("file:/home/aphani/vldb_22/data.csv", data_type="frame", format="csv", header=FALSE);

print("("+nrow(data)+", "+ncol(data)+")");
allCols = "1";
for (i in 2:ncol(data))
  allCols = allCols+","+i;

binning = "{id:1, method:equi-height, numbins:10}"
for (i in 2:ncol(data))
  binning = binning+",\n{id:"+i+", method:equi-height, numbins:10}";

recode = allCols;
dummy = allCols;
hash = allCols;
jspec1 = "{ ids:true, recode:["+recode+"]}"; #RC
#jspec1 = "{ ids:true, dummycode:["+dummy+"]}"; #DC
jspec2 = "{ ids:true, bin:["+binning+"]}"; #Binning
jspec3 = "{ ids:true, hash:["+hash+"], K:"+1000+"}"; #FH

lim = 10;
R = matrix(0, rows=lim, cols=1);
for (i in 1:lim) {
  print("INFO: starting transformencode");
  t1 = time();
  [X, M] = transformencode(target=data, spec=jspec3);
  t2 = time();
  R[i,1] = floor((t2-t1)/1000000);  
  print("Elapsed time for transformations using SystemDS = "+floor((t2-t1)/1000000)+" millsec");
}
R = order(target=R, by=1);
res = R[1:3,];
write(res, "file:/home/aphani/vldb_22/results/rowpart_dml.dat", format="csv", sep="\t");
print("("+nrow(X)+", "+ncol(X)+")");

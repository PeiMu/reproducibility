# Create dataset
D = rand(rows=25600, cols=784, min=0, max=20, seed=42)

# Set batch size, #epocs, #iterations
bs = 128;
ep = 10;
iter_ep = ceil(nrow(D)/bs);
maxiter = ep * iter_ep;
beg = 1;
iter = 0;
i = 1;

# Start mini-batch processing
while (iter < maxiter) {
  end = beg + bs - 1;
  if (end>nrow(D)) 
    end = nrow(D);
  X = D[beg:end,]

  # scale() is reusable across epochs
  X = scale(X, TRUE, TRUE);

  # Pollute cache with not reusable intermediates
  X = ((X + X) * i - X) / (i+1)
  X = ((X + X) * i - X) / (i+1)
  X = ((X + X) * i - X) / (i+1)
  X = ((X + X) * i - X) / (i+1)
  X = ((X + X) * i - X) / (i+1)
  X = ((X + X) * i - X) / (i+1)
  X = ((X + X) * i - X) / (i+1)
  X = ((X + X) * i - X) / (i+1)
  X = ((X + X) * i - X) / (i+1)
  X = ((X + X) * i - X) / (i+1)
  X = ((X + X) * i - X) / (i+1)
  X = ((X + X) * i - X) / (i+1)
  X = ((X + X) * i - X) / (i+1)

  X = ((X + X) * i - X) / (i+1)
  X = ((X + X) * i - X) / (i+1)
  X = ((X + X) * i - X) / (i+1)
  X = ((X + X) * i - X) / (i+1)
  X = ((X + X) * i - X) / (i+1)
  X = ((X + X) * i - X) / (i+1)
  X = ((X + X) * i - X) / (i+1)
  X = ((X + X) * i - X) / (i+1)
  X = ((X + X) * i - X) / (i+1)

  iter = iter + 1;
  if (end == nrow(D)) 
    beg = 1;
  else
    beg = end + 1;
  i = i + 1;

}

# Force compiler to execute all operations
print(sum(X));
